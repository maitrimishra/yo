its-soils-tutorial/precomputed-output/otus/log_20150120222742.txt
its-soils-tutorial/precomputed-output/otus/otu_table_mc2_w_tax.biom
its-soils-tutorial/precomputed-output/otus/new_refseqs.fna
its-soils-tutorial/precomputed-output/otus/step4_otus/
its-soils-tutorial/precomputed-output/otus/step4_otus/failures_otus.txt
its-soils-tutorial/precomputed-output/otus/step4_otus/step4_rep_set.fna
its-soils-tutorial/precomputed-output/otus/step4_otus/failures_otus.log
its-soils-tutorial/precomputed-output/otus/step4_otus/failures_clusters.uc
its-soils-tutorial/precomputed-output/otus/otu_table_mc2.biom
its-soils-tutorial/precomputed-output/otus/index.html
its-soils-tutorial/precomputed-output/otus/final_otu_map_mc2.txt
its-soils-tutorial/precomputed-output/otus/final_otu_map.txt
its-soils-tutorial/precomputed-output/otus/step1_otus/
its-soils-tutorial/precomputed-output/otus/step1_otus/step1_rep_set.fna
its-soils-tutorial/precomputed-output/otus/step1_otus/seqs_otus.log
its-soils-tutorial/precomputed-output/otus/step1_otus/seqs_otus.txt
its-soils-tutorial/precomputed-output/otus/step1_otus/seqs_failures.txt
its-soils-tutorial/precomputed-output/otus/step1_otus/failures.fasta
its-soils-tutorial/precomputed-output/otus/step1_otus/seqs_clusters.uc
qiime@qiime-190-virtual-box:~$ tar zxvf its_12_11_otus.tgz
its_12_11_otus/
its_12_11_otus/taxonomy/
its_12_11_otus/taxonomy/99_otu_taxonomy.txt.gz
its_12_11_otus/taxonomy/97_otu_taxonomy.txt.gz
its_12_11_otus/README.md
its_12_11_otus/rep_set/
its_12_11_otus/rep_set/97_otus.fasta.gz
its_12_11_otus/rep_set/99_otus.fasta.gz
qiime@qiime-190-virtual-box:~$ check_id_map.py -mFasting_Map.txt -o mapping_output

This script has been renamed validate_mapping_file.py for clarity. For help, call validate_mapping_file.py -h

qiime@qiime-190-virtual-box:~$ validate_mapping_file.py -mFasting_Map.txt -o mapping_output
Error in validate_mapping_file.py: option -m: file does not exist: 'Fasting_Map.txt'

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$ validate_mapping_file.py -mcostello_timeseries_map.txt -omapping_output
Errors and/or warnings detected in mapping file.  Please check the log and html file for details.
qiime@qiime-190-virtual-box:~$ validate_mapping_file.py -mcostello_timeseries_map.txt -o mapping_output
Errors and/or warnings detected in mapping file.  Please check the log and html file for details.
qiime@qiime-190-virtual-box:~$ validate_mapping_file.py -hcostello_timeseries_map.txt -o mapping_output
Usage: validate_mapping_file.py [options] {-m/--mapping_fp MAPPING_FP}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)

Specifically, we check that:

    - The BarcodeSequence, LinkerPrimerSequences, and ReversePrimer fields
       have valid IUPAC DNA characters, and BarcodeSequence characters
       are non-degenerate (error)
    - The SampleID, BarcodeSequence, LinkerPrimerSequence, and Description
       headers are present. (error)
    - There are not duplicate header fields (error)
    - There are not duplicate barcodes (error)
    - Barcodes are of the same length.  Suppressed when
       variable_len_barcode flag is passed (warning)
    - The headers do not contain invalid characters (alphanumeric and
       underscore only) (warning)
    - The data fields do not contain invalid characters (alphanumeric,
       underscore, space, and +-%./:,; characters) (warning)
    - SampleID fields are MIENS compliant (only alphanumeric
       and . characters). (warning)
    - There are no duplicates when the primer and variable length
       barcodes are appended (error)
    - There are no duplicates when barcodes and added demultiplex
       fields (-j option) are combined (error)
    - Data fields are not found beyond the Description column (warning)

    Details about the metadata mapping file format can be found here:
    http://www.qiime.org/documentation/file_formats.html#metadata-mapping-files

    Errors and warnings are saved to a log file.  Errors can be caused by
    problems with the headers, invalid characters in barcodes or primers, or
    by duplications in SampleIDs or barcodes.

    Warnings can arise from invalid characters and variable length barcodes that
    are not specified with the --variable_len_barcode.
    Warnings will contain a reference to the cell (row,column) that the
    warning arose from.

    In addition to the log file, a "corrected_mapping" file will be created.
    Any invalid characters will be replaced with '.' characters in
    the SampleID fields (to enforce MIENS compliance) and text in other data
    fields will be replaced with the character specified by the -c parameter,
    which is an underscore "_" by default.

    A html file will be created as well, which will show locations of
    warnings and errors, highlighted in yellow and red respectively.  If no
    errors or warnings were present the file will display a message saying
    such.  Header errors can mask other errors, so these should be corrected
    first.

    If pooled primers are used, separate with a comma.  For instance, a pooled
    set of three 27f primers (used to increase taxonomic coverage) could be
    specified in the LinkerPrimerSequence fields as such:
    AGGGTTCGATTCTGGCTCAG,AGAGTTTGATCCTGGCTTAG,AGAATTTGATCTTGGTTCAG


Example usage: 
Print help message and exit
 validate_mapping_file.py -h

Example: Check the Fasting_Map.txt     mapping file for problems, supplying the required mapping file, and output     the results in the validate_mapping_file_output directory
 validate_mapping_file.py -m     Fasting_Map.txt -o validate_mapping_file_output

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Required output directory for log file, corrected
                        mapping file, and html file. [default: ./]
  -v, --verbose         Enable printing information to standard out [default:
                        True]
  -c CHAR_REPLACE, --char_replace=CHAR_REPLACE
                        Changes the default character used to replace invalid
                        characters found in the mapping file.  Must be a valid
                        character (alphanumeric, period, or
                        underscore).[default: _]
  -b, --not_barcoded    Use -b if barcodes are not present.  BarcodeSequence
                        header still required.  [default: False]
  -B, --variable_len_barcodes
                        Use -B if variable length barcodes are present to
                        suppress warnings about barcodes of unequal length.
                        [default: False]
  -p, --disable_primer_check
                        Use -p to disable checks for primers.
                        LinkerPrimerSequence header still required. [default:
                        False]
  -j ADDED_DEMULTIPLEX_FIELD, --added_demultiplex_field=ADDED_DEMULTIPLEX_FIELD
                        Use -j to add a field to use in the mapping file as
                        additional demultiplexing (can be used with or without
                        barcodes).  All combinations of barcodes/primers and
                        the these fields must be unique. The fields must
                        contain values that can be parsed from the fasta
                        labels such as "plate=R_2008_12_09".  In this case,
                        "plate" would be the column header and "R_2008_12_09"
                        would be the field data (minus quotes) in the mapping
                        file.  To use the run prefix from the fasta label,
                        such as ">FLP3FBN01ELBSX", where "FLP3FBN01" is
                        generated from the run ID, use "-j run_prefix" and set
                        the run prefix to be used as the data under the column
                        header "run_prefix".  [default: none]
  -s, --suppress_html   Use -s to disable html file generation, can be useful
                        for extremely large mapping files. [default: False]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -m MAPPING_FP, --mapping_fp=MAPPING_FP
                        Metadata mapping filepath [REQUIRED]
qiime@qiime-190-virtual-box:~$ validate_mapping_file.py [-h] {-m/--mapping_fp MAPPING_FP}
Error in validate_mapping_file.py: Positional argument detected: [-h]
 Be sure all parameters are identified by their option name.
 (e.g.: include the '-i' in '-i INPUT_DIR')

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$  validate_mapping_file.py [-o OUTPUT_DR] {-m MAPPING_FPcostello_timeseries_map.txt}
Error in validate_mapping_file.py: Positional argument detected: [-o
 Be sure all parameters are identified by their option name.
 (e.g.: include the '-i' in '-i INPUT_DIR')

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$ validate_mapping_file.py {-m MAPPING_FPcostello_timeseries_map.txt}
Error in validate_mapping_file.py: Positional argument detected: {-m
 Be sure all parameters are identified by their option name.
 (e.g.: include the '-i' in '-i INPUT_DIR')

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$ validate_mapping_file.py -m MAPPING_FPcostello_timeseries_map.txt
Error in validate_mapping_file.py: option -m: file does not exist: 'MAPPING_FPcostello_timeseries_map.txt'

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$ validate_mapping_file.py -o OUTPUT_DIR costello_timeseries_map.txt
Error in validate_mapping_file.py: Positional argument detected: costello_timeseries_map.txt
 Be sure all parameters are identified by their option name.
 (e.g.: include the '-i' in '-i INPUT_DIR')

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$ validate_mapping_file.py --version
Version: validate_mapping_file.py 1.9.1
qiime@qiime-190-virtual-box:~$ validate_mapping_file.py -h
Usage: validate_mapping_file.py [options] {-m/--mapping_fp MAPPING_FP}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)

Specifically, we check that:

    - The BarcodeSequence, LinkerPrimerSequences, and ReversePrimer fields
       have valid IUPAC DNA characters, and BarcodeSequence characters
       are non-degenerate (error)
    - The SampleID, BarcodeSequence, LinkerPrimerSequence, and Description
       headers are present. (error)
    - There are not duplicate header fields (error)
    - There are not duplicate barcodes (error)
    - Barcodes are of the same length.  Suppressed when
       variable_len_barcode flag is passed (warning)
    - The headers do not contain invalid characters (alphanumeric and
       underscore only) (warning)
    - The data fields do not contain invalid characters (alphanumeric,
       underscore, space, and +-%./:,; characters) (warning)
    - SampleID fields are MIENS compliant (only alphanumeric
       and . characters). (warning)
    - There are no duplicates when the primer and variable length
       barcodes are appended (error)
    - There are no duplicates when barcodes and added demultiplex
       fields (-j option) are combined (error)
    - Data fields are not found beyond the Description column (warning)

    Details about the metadata mapping file format can be found here:
    http://www.qiime.org/documentation/file_formats.html#metadata-mapping-files

    Errors and warnings are saved to a log file.  Errors can be caused by
    problems with the headers, invalid characters in barcodes or primers, or
    by duplications in SampleIDs or barcodes.

    Warnings can arise from invalid characters and variable length barcodes that
    are not specified with the --variable_len_barcode.
    Warnings will contain a reference to the cell (row,column) that the
    warning arose from.

    In addition to the log file, a "corrected_mapping" file will be created.
    Any invalid characters will be replaced with '.' characters in
    the SampleID fields (to enforce MIENS compliance) and text in other data
    fields will be replaced with the character specified by the -c parameter,
    which is an underscore "_" by default.

    A html file will be created as well, which will show locations of
    warnings and errors, highlighted in yellow and red respectively.  If no
    errors or warnings were present the file will display a message saying
    such.  Header errors can mask other errors, so these should be corrected
    first.

    If pooled primers are used, separate with a comma.  For instance, a pooled
    set of three 27f primers (used to increase taxonomic coverage) could be
    specified in the LinkerPrimerSequence fields as such:
    AGGGTTCGATTCTGGCTCAG,AGAGTTTGATCCTGGCTTAG,AGAATTTGATCTTGGTTCAG


Example usage: 
Print help message and exit
 validate_mapping_file.py -h

Example: Check the Fasting_Map.txt     mapping file for problems, supplying the required mapping file, and output     the results in the validate_mapping_file_output directory
 validate_mapping_file.py -m     Fasting_Map.txt -o validate_mapping_file_output

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -o OUTPUT_DIR, --output_dir=OUTPUT_DIR
                        Required output directory for log file, corrected
                        mapping file, and html file. [default: ./]
  -v, --verbose         Enable printing information to standard out [default:
                        True]
  -c CHAR_REPLACE, --char_replace=CHAR_REPLACE
                        Changes the default character used to replace invalid
                        characters found in the mapping file.  Must be a valid
                        character (alphanumeric, period, or
                        underscore).[default: _]
  -b, --not_barcoded    Use -b if barcodes are not present.  BarcodeSequence
                        header still required.  [default: False]
  -B, --variable_len_barcodes
                        Use -B if variable length barcodes are present to
                        suppress warnings about barcodes of unequal length.
                        [default: False]
  -p, --disable_primer_check
                        Use -p to disable checks for primers.
                        LinkerPrimerSequence header still required. [default:
                        False]
  -j ADDED_DEMULTIPLEX_FIELD, --added_demultiplex_field=ADDED_DEMULTIPLEX_FIELD
                        Use -j to add a field to use in the mapping file as
                        additional demultiplexing (can be used with or without
                        barcodes).  All combinations of barcodes/primers and
                        the these fields must be unique. The fields must
                        contain values that can be parsed from the fasta
                        labels such as "plate=R_2008_12_09".  In this case,
                        "plate" would be the column header and "R_2008_12_09"
                        would be the field data (minus quotes) in the mapping
                        file.  To use the run prefix from the fasta label,
                        such as ">FLP3FBN01ELBSX", where "FLP3FBN01" is
                        generated from the run ID, use "-j run_prefix" and set
                        the run prefix to be used as the data under the column
                        header "run_prefix".  [default: none]
  -s, --suppress_html   Use -s to disable html file generation, can be useful
                        for extremely large mapping files. [default: False]

  REQUIRED options:
    The following options must be provided under all circumstances.

    -m MAPPING_FP, --mapping_fp=MAPPING_FP
                        Metadata mapping filepath [REQUIRED]
qiime@qiime-190-virtual-box:~$ validate_mapping_file.py -o OUTPUT_DIR
Error in validate_mapping_file.py: Required option --mapping_fp omitted.

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$ validate_mapping_file.py -o OUTPUT_DIR --mapping_fp
Error in validate_mapping_file.py: --mapping_fp option requires an argument

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$ validate_mapping_file.py -m     costello_timeseries_map.txt -o validate_mapping_file_output
Errors and/or warnings detected in mapping file.  Please check the log and html file for details.
qiime@qiime-190-virtual-box:~$ split_libraries.py
Usage: split_libraries.py [options] {-m/--map MAP_FNAME -f/--fasta FASTA_FNAMES}

[] indicates optional input (order unimportant)
{} indicates required input (order unimportant)

Since newer sequencing technologies provide many reads per run (e.g. the 454 GS FLX Titanium series can produce 400-600 million base pairs with 400-500 base pair read lengths) researchers are now finding it useful to combine multiple samples into a single 454 run. This multiplexing is achieved through the application of a pyrosequencing-tailored nucleotide barcode design (described in (Parameswaran et al., 2007)). By assigning individual, unique sample specific barcodes, multiple sequencing runs may be performed in parallel and the resulting reads can later be binned according to sample. The script split_libraries.py performs this task, in addition to several quality filtering steps including user defined cut-offs for: sequence lengths; end-trimming; minimum quality score. To summarize, by using the fasta, mapping, and quality files, the program split_libraries.py will parse sequences that meet user defined quality thresholds and then rename each read with the appropriate Sample ID, thus formatting the sequence data for downstream analysis. If a combination of different sequencing technologies are used in any particular study, split_libraries.py can be used to perform the quality-filtering for each library individually and the output may then be combined.

Sequences from samples that are not found in the mapping file (no corresponding barcode) and sequences without the correct primer sequence will be excluded. Additional scripts can be used to exclude sequences that match a given reference sequence (e.g. the human genome; exclude_seqs_by_blast.py) and/or sequences that are flagged as chimeras (identify_chimeric_seqs.py).


Example usage: 
Print help message and exit
 split_libraries.py -h

Standard Example: Using a single 454 run, which contains a single FASTA, QUAL, and mapping file while using default parameters and outputting the data into the Directory "Split_Library_Output"
 split_libraries.py -m Mapping_File.txt -f 1.TCA.454Reads.fna -q 1.TCA.454Reads.qual -o Split_Library_Output/

Multiple FASTA and QUAL Files Example: For the case where there are multiple FASTA and QUAL files, the user can run the following comma-separated command as long as there are not duplicate barcodes listed in the mapping file
 split_libraries.py -m Mapping_File.txt -f 1.TCA.454Reads.fna,2.TCA.454Reads.fna -q 1.TCA.454Reads.qual,2.TCA.454Reads.qual -o Split_Library_Output_comma_separated/

Duplicate Barcode Example: An example of this situation would be a study with 1200 samples. You wish to have 400 samples per run, so you split the analysis into three runs and reuse barcoded primers (you only have 600). After initial analysis you determine a small subset is underrepresented (<500 sequences per samples) and you boost the number of sequences per sample for this subset by running a fourth run. Since the same sample IDs are in more than one run, it is likely that some sequences will be assigned the same unique identifier by split_libraries.py when it is run separately on the four different runs, each with their own barcode file. This will cause a problem in file concatenation of the four different runs into a single large file. To avoid this, you can use the '-n' parameter which defines a start index for split_libraries.py. From experience, most FLX runs (when combining both files for a single plate) will have 350,000 to 650,000 sequences. Thus, if Run 1 for split_libraries.py uses '-n 1000000', Run 2 uses '-n 2000000', etc., then you are guaranteed to have unique identifiers after concatenating the results of multiple FLX runs. With newer technologies you will just need to make sure that your start index spacing is greater than the potential number of sequences.

To run split_libraries.py, you will need two or more (depending on the number of times the barcodes were reused) separate mapping files (one for each Run, for example one for Run1 and another one for Run2), then you can run split_libraries.py using the FASTA and mapping file for Run1 and FASTA and mapping file for Run2. Once you have run split libraries on each file independently, you can concatenate (e.g. using the 'cat' command) the sequence files that were generated by split_libraries.py. You can also concatenate the mapping files, since the barcodes are not necessary for downstream analyses, unless the same sample IDs are found in multiple mapping files.

Run split_libraries.py on Run 1
 split_libraries.py -m Mapping_File.txt -f 1.TCA.454Reads.fna -q 1.TCA.454Reads.qual -o Split_Library_Run1_Output/ -n 1000000

Run split_libraries.py on Run 2. The resulting FASTA files from Run 1 and Run 2 can then be concatenated using the 'cat' command (e.g. cat Split_Library_Run1_Output/seqs.fna Split_Library_Run2_Output/seqs.fna > Combined_seqs.fna) and used in downstream analyses.
 split_libraries.py -m Mapping_File.txt -f 2.TCA.454Reads.fna -q 2.TCA.454Reads.qual -o Split_Library_Run2_Output/ -n 2000000

Barcode Decoding Example: The standard barcode types supported by split_libraries.py are golay (Length: 12 NTs) and hamming (Length: 8 NTs). For situations where the barcodes are of a different length than golay and hamming, the user can define a generic barcode type "-b" as an integer, where the integer is the length of the barcode used in the study.

Note: When analyzing large datasets (>100,000 seqs), users may want to use a generic barcode type, even for length 8 and 12 NTs, since the golay and hamming decoding processes can be computationally intensive, which causes the script to run slow. Barcode correction can be disabled with the -c option if desired.

For the case where the 8 base pair barcodes were used, you can use the following command
 split_libraries.py -m Mapping_File_8bp_barcodes.txt -f 1.TCA.454Reads.fna  -q 1.TCA.454Reads.qual -o split_Library_output_8bp/ -b 8

Linkers and Primers: The linker and primer sequence (or all the degenerate possibilities) are associated with each barcode from the mapping file. If a barcode cannot be identified, all the possible primers in the mapping file are tested to find a matching sequence. Using truncated forms of the same primer can lead to unexpected results for rare circumstances where the barcode cannot be identified and the sequence following the barcode matches multiple primers.

In many cases, sequence reads are long enough to sequence through the reverse primer and sequencing adapter.  To remove these primers and all following sequences, the -z option can be used.  By default, this option is set to 'disable'.  If it is set to 'truncate_only', split_libraries will trim the primer and any sequence following it if the primer is found.  If the 'truncate_remove' option is set, split_libraries.py will trim the primer if found, and will not write the sequence if the primer is not found. The allowed mismatches for the reverse primer are set with the --reverse_primer_mismatches parameter (default 0).  To use reverse primer removal, one must include a 'ReversePrimer' column in the mapping file, with the reverse primer recorded in the 5' to 3' orientation.

Example reverse primer removal, where primers are trimmed if found, and sequence is written unchanged if not found.  Mismatches are increased to 1 from the default 0
 split_libraries.py -m Mapping_File_reverse_primer.txt -f 1.TCA.454Reads.fna -q 1.TCA.454Reads.qual -o split_libraries_output_revprimer/ --reverse_primer_mismatches 1 -z truncate_only

qiime@qiime-190-virtual-box:~$ split_libraries.py -mFasting_Map.txt -f Fasting.fna -q Fasting_example.qual -i split_library_output
Error in split_libraries.py: option -m: file does not exist: 'Fasting_Map.txt'

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$ split_libraries.py -mcostello_timeseries_map_corrected.txt -f Fasting.fna -q Fasting_example.qual -i split_library_output
Error in split_libraries.py: option -m: file does not exist: 'costello_timeseries_map_corrected.txt'

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$ split_libraries.py -mcostello_timeseries_map_corrected.txt -f Fasting.fna -q Fasting_example.qual -i split_library_output
Error in split_libraries.py: No filepaths match pattern/name 'Fasting.fna'. All patterns must be matched at least once.

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$ split_libraries.py -mcostello_timeseries_map_corrected.txt -f step1_rep_set.fna -q Fasting_example.qual -i split_library_output
Error in split_libraries.py: No filepaths match pattern/name 'step1_rep_set.fna'. All patterns must be matched at least once.

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$ split_libraries.py -mcostello_timeseries_map_corrected.txt -f step1_rep_set.fna -q Fasting_example.qual -i split_library_output
Error in split_libraries.py: No filepaths match pattern/name 'Fasting_example.qual'. All patterns must be matched at least once.

If you need help with QIIME, see:
http://help.qiime.org
qiime@qiime-190-virtual-box:~$ split_libraries.py -mcostello_timeseries_map_corrected.txt -f step1_rep_set.fna -i split_library_output
/usr/local/lib/python2.7/dist-packages/numpy/core/_methods.py:59: RuntimeWarning: Mean of empty slice.
  warnings.warn("Mean of empty slice.", RuntimeWarning)
Traceback (most recent call last):
  File "/usr/local/bin/split_libraries.py", line 411, in <module>
    main()
  File "/usr/local/bin/split_libraries.py", line 408, in main
    truncate_ambi_bases=opts.truncate_ambi_bases)
  File "/usr/local/lib/python2.7/dist-packages/qiime/split_libraries.py", line 1447, in preprocess
    reverse_primer_mismatches, truncate_ambi_bases)
  File "/usr/local/lib/python2.7/dist-packages/qiime/split_libraries.py", line 900, in check_seqs
    float(median_length_filtering)
ValueError: could not convert string to float: split_library_output
qiime@qiime-190-virtual-box:~$ 
